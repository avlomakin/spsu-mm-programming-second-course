//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExternalServices.GameSession {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameSessionMoveDto", Namespace="http://schemas.datacontract.org/2004/07/GameService.GameSession")]
    [System.SerializableAttribute()]
    public partial class GameSessionMoveDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BigCellField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCrossField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BigCell {
            get {
                return this.BigCellField;
            }
            set {
                if ((this.BigCellField.Equals(value) != true)) {
                    this.BigCellField = value;
                    this.RaisePropertyChanged("BigCell");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCross {
            get {
                return this.IsCrossField;
            }
            set {
                if ((this.IsCrossField.Equals(value) != true)) {
                    this.IsCrossField = value;
                    this.RaisePropertyChanged("IsCross");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameSession.IGameSessionService", CallbackContract=typeof(ExternalServices.GameSession.IGameSessionServiceCallback))]
    public interface IGameSessionService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionService/SetupSession")]
        void SetupSession(string username, string opponentUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionService/SetupSession")]
        System.Threading.Tasks.Task SetupSessionAsync(string username, string opponentUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionService/Step")]
        void Step(int bigCell, int position);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionService/Step")]
        System.Threading.Tasks.Task StepAsync(int bigCell, int position);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionService/Won")]
        void Won();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionService/Won")]
        System.Threading.Tasks.Task WonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameSessionService/Sync", ReplyAction="http://tempuri.org/IGameSessionService/SyncResponse")]
        ExternalServices.GameSession.GameSessionMoveDto[] Sync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameSessionService/Sync", ReplyAction="http://tempuri.org/IGameSessionService/SyncResponse")]
        System.Threading.Tasks.Task<ExternalServices.GameSession.GameSessionMoveDto[]> SyncAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameSessionServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionService/SendStep")]
        void SendStep(ExternalServices.GameSession.GameSessionMoveDto move);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionService/SyncRoles")]
        void SyncRoles(bool isCross);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameSessionServiceChannel : ExternalServices.GameSession.IGameSessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameSessionServiceClient : System.ServiceModel.DuplexClientBase<ExternalServices.GameSession.IGameSessionService>, ExternalServices.GameSession.IGameSessionService {
        
        public GameSessionServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameSessionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameSessionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameSessionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameSessionServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SetupSession(string username, string opponentUsername) {
            base.Channel.SetupSession(username, opponentUsername);
        }
        
        public System.Threading.Tasks.Task SetupSessionAsync(string username, string opponentUsername) {
            return base.Channel.SetupSessionAsync(username, opponentUsername);
        }
        
        public void Step(int bigCell, int position) {
            base.Channel.Step(bigCell, position);
        }
        
        public System.Threading.Tasks.Task StepAsync(int bigCell, int position) {
            return base.Channel.StepAsync(bigCell, position);
        }
        
        public void Won() {
            base.Channel.Won();
        }
        
        public System.Threading.Tasks.Task WonAsync() {
            return base.Channel.WonAsync();
        }
        
        public ExternalServices.GameSession.GameSessionMoveDto[] Sync() {
            return base.Channel.Sync();
        }
        
        public System.Threading.Tasks.Task<ExternalServices.GameSession.GameSessionMoveDto[]> SyncAsync() {
            return base.Channel.SyncAsync();
        }
    }
}
