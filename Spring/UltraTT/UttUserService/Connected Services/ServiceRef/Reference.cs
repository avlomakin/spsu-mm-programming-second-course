//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UttUserService.ServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDto", Namespace="http://schemas.datacontract.org/2004/07/UserService.Dto")]
    [System.SerializableAttribute()]
    public partial class UserDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] RolesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Roles {
            get {
                return this.RolesField;
            }
            set {
                if ((object.ReferenceEquals(this.RolesField, value) != true)) {
                    this.RolesField = value;
                    this.RaisePropertyChanged("Roles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatDto", Namespace="http://schemas.datacontract.org/2004/07/UserService.Dto")]
    [System.SerializableAttribute()]
    public partial class StatDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CrossWinrateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NoughtWinrateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalWinrateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CrossWinrate {
            get {
                return this.CrossWinrateField;
            }
            set {
                if ((this.CrossWinrateField.Equals(value) != true)) {
                    this.CrossWinrateField = value;
                    this.RaisePropertyChanged("CrossWinrate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NoughtWinrate {
            get {
                return this.NoughtWinrateField;
            }
            set {
                if ((this.NoughtWinrateField.Equals(value) != true)) {
                    this.NoughtWinrateField = value;
                    this.RaisePropertyChanged("NoughtWinrate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalWinrate {
            get {
                return this.TotalWinrateField;
            }
            set {
                if ((this.TotalWinrateField.Equals(value) != true)) {
                    this.TotalWinrateField = value;
                    this.RaisePropertyChanged("TotalWinrate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Auth", ReplyAction="http://tempuri.org/IUserService/AuthResponse")]
        UttUserService.ServiceRef.UserDto Auth(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Auth", ReplyAction="http://tempuri.org/IUserService/AuthResponse")]
        System.Threading.Tasks.Task<UttUserService.ServiceRef.UserDto> AuthAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/Reg")]
        void Reg(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/Reg")]
        System.Threading.Tasks.Task RegAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetTop", ReplyAction="http://tempuri.org/IUserService/GetTopResponse")]
        UttUserService.ServiceRef.UserDto[] GetTop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetTop", ReplyAction="http://tempuri.org/IUserService/GetTopResponse")]
        System.Threading.Tasks.Task<UttUserService.ServiceRef.UserDto[]> GetTopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetScore", ReplyAction="http://tempuri.org/IUserService/GetScoreResponse")]
        int GetScore(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetScore", ReplyAction="http://tempuri.org/IUserService/GetScoreResponse")]
        System.Threading.Tasks.Task<int> GetScoreAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetStat", ReplyAction="http://tempuri.org/IUserService/GetStatResponse")]
        UttUserService.ServiceRef.StatDto GetStat(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetStat", ReplyAction="http://tempuri.org/IUserService/GetStatResponse")]
        System.Threading.Tasks.Task<UttUserService.ServiceRef.StatDto> GetStatAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : UttUserService.ServiceRef.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<UttUserService.ServiceRef.IUserService>, UttUserService.ServiceRef.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UttUserService.ServiceRef.UserDto Auth(string username, string password) {
            return base.Channel.Auth(username, password);
        }
        
        public System.Threading.Tasks.Task<UttUserService.ServiceRef.UserDto> AuthAsync(string username, string password) {
            return base.Channel.AuthAsync(username, password);
        }
        
        public void Reg(string username, string password) {
            base.Channel.Reg(username, password);
        }
        
        public System.Threading.Tasks.Task RegAsync(string username, string password) {
            return base.Channel.RegAsync(username, password);
        }
        
        public UttUserService.ServiceRef.UserDto[] GetTop() {
            return base.Channel.GetTop();
        }
        
        public System.Threading.Tasks.Task<UttUserService.ServiceRef.UserDto[]> GetTopAsync() {
            return base.Channel.GetTopAsync();
        }
        
        public int GetScore(string username) {
            return base.Channel.GetScore(username);
        }
        
        public System.Threading.Tasks.Task<int> GetScoreAsync(string username) {
            return base.Channel.GetScoreAsync(username);
        }
        
        public UttUserService.ServiceRef.StatDto GetStat(string username) {
            return base.Channel.GetStat(username);
        }
        
        public System.Threading.Tasks.Task<UttUserService.ServiceRef.StatDto> GetStatAsync(string username) {
            return base.Channel.GetStatAsync(username);
        }
    }
}
