//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceInterface.InstSevrRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InstSevrRef.IInstService", CallbackContract=typeof(ServiceInterface.InstSevrRef.IInstServiceCallback))]
    public interface IInstService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstService/GetFilters", ReplyAction="http://tempuri.org/IInstService/GetFiltersResponse")]
        string[] GetFilters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstService/GetFilters", ReplyAction="http://tempuri.org/IInstService/GetFiltersResponse")]
        System.Threading.Tasks.Task<string[]> GetFiltersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstService/EditPict", ReplyAction="http://tempuri.org/IInstService/EditPictResponse")]
        void EditPict(byte[] data, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstService/EditPict", ReplyAction="http://tempuri.org/IInstService/EditPictResponse")]
        System.Threading.Tasks.Task EditPictAsync(byte[] data, string filter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInstServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInstService/Notify")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        void Notify(object progress);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInstService/GetPict")]
        void GetPict(byte[] pict);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInstServiceChannel : ServiceInterface.InstSevrRef.IInstService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InstServiceClient : System.ServiceModel.DuplexClientBase<ServiceInterface.InstSevrRef.IInstService>, ServiceInterface.InstSevrRef.IInstService {
        
        public InstServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public InstServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public InstServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InstServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InstServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string[] GetFilters() {
            return base.Channel.GetFilters();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFiltersAsync() {
            return base.Channel.GetFiltersAsync();
        }
        
        public void EditPict(byte[] data, string filter) {
            base.Channel.EditPict(data, filter);
        }
        
        public System.Threading.Tasks.Task EditPictAsync(byte[] data, string filter) {
            return base.Channel.EditPictAsync(data, filter);
        }
    }
}
